"""
Core Data Models for AI Education System
多智能体教学系统核心数据模型
"""
from django.db import models
from django.contrib.auth.models import User


class TeacherOutline(models.Model):
    """
    教学大纲
    Teacher uploads this to start the process
    """
    DIFFICULTY_CHOICES = [
        ('easy', 'Easy'),
        ('medium', 'Medium'),
        ('hard', 'Hard'),
    ]
    
    title = models.CharField(max_length=255, verbose_name="标题")
    content = models.TextField(verbose_name="大纲内容")
    duration_min = models.IntegerField(default=45, verbose_name="课时长度(分钟)")
    difficulty = models.CharField(
        max_length=20, 
        choices=DIFFICULTY_CHOICES, 
        default='medium',
        verbose_name="难度"
    )
    created_by = models.ForeignKey(
        User, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        verbose_name="创建教师"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="创建时间")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="更新时间")
    
    class Meta:
        verbose_name = "教学大纲"
        verbose_name_plural = "教学大纲"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.title} ({self.difficulty})"


class UnifiedLessonPlan(models.Model):
    """
    统一教学计划 (Teacher Agent 输出)
    Baseline teaching plan generated by Teacher Agent
    """
    outline = models.ForeignKey(
        TeacherOutline, 
        on_delete=models.CASCADE,
        related_name='lesson_plans',
        verbose_name="对应大纲"
    )
    version = models.CharField(max_length=50, default='v1.0', verbose_name="版本号")
    objectives = models.JSONField(default=list, verbose_name="教学目标")
    sequence = models.JSONField(default=list, verbose_name="知识点序列")
    activities = models.JSONField(default=list, verbose_name="教学活动")
    checks = models.JSONField(default=list, blank=True, verbose_name="检查点")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="生成时间")
    
    class Meta:
        verbose_name = "统一教学计划"
        verbose_name_plural = "统一教学计划"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.outline.title} - {self.version}"


class QuizQuestion(models.Model):
    """
    题库 (Tutor Agent 生成)
    Questions generated by Tutor Agent
    """
    QUESTION_TYPE_CHOICES = [
        ('multiple_choice', 'Multiple Choice'),
        ('true_false', 'True/False'),
        ('short_answer', 'Short Answer'),
        ('fill_blank', 'Fill in the Blank'),
    ]
    
    outline = models.ForeignKey(
        TeacherOutline,
        on_delete=models.CASCADE,
        related_name='questions',
        verbose_name="所属大纲"
    )
    question_text = models.TextField(verbose_name="题目内容")
    question_type = models.CharField(
        max_length=30,
        choices=QUESTION_TYPE_CHOICES,
        default='multiple_choice',
        verbose_name="题目类型"
    )
    options = models.JSONField(default=list, blank=True, verbose_name="选项(JSON)")
    correct_answer = models.TextField(verbose_name="正确答案")
    explanation = models.TextField(blank=True, verbose_name="解析")
    difficulty = models.CharField(max_length=20, default='medium', verbose_name="难度")
    order = models.IntegerField(default=0, verbose_name="顺序")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="创建时间")
    
    class Meta:
        verbose_name = "题目"
        verbose_name_plural = "题目"
        ordering = ['outline', 'order']
    
    def __str__(self):
        return f"Q{self.order}: {self.question_text[:50]}"


class Student(models.Model):
    """
    学生信息
    Student profile
    """
    student_id = models.CharField(max_length=50, unique=True, verbose_name="学号")
    name = models.CharField(max_length=100, verbose_name="姓名")
    grade = models.CharField(max_length=50, blank=True, verbose_name="年级")
    class_name = models.CharField(max_length=50, blank=True, verbose_name="班级")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="注册时间")
    
    class Meta:
        verbose_name = "学生"
        verbose_name_plural = "学生"
        ordering = ['student_id']
    
    def __str__(self):
        return f"{self.student_id} - {self.name}"


class Attempt(models.Model):
    """
    答题会话
    Student's quiz attempt session
    """
    student = models.ForeignKey(
        Student,
        on_delete=models.CASCADE,
        related_name='attempts',
        verbose_name="学生"
    )
    outline = models.ForeignKey(
        TeacherOutline,
        on_delete=models.CASCADE,
        related_name='attempts',
        verbose_name="对应大纲"
    )
    started_at = models.DateTimeField(auto_now_add=True, verbose_name="开始时间")
    completed_at = models.DateTimeField(null=True, blank=True, verbose_name="完成时间")
    total_score = models.FloatField(default=0.0, verbose_name="总分")
    is_completed = models.BooleanField(default=False, verbose_name="是否完成")
    
    class Meta:
        verbose_name = "答题会话"
        verbose_name_plural = "答题会话"
        ordering = ['-started_at']
    
    def __str__(self):
        return f"{self.student.student_id} - {self.outline.title}"


class AttemptAnswer(models.Model):
    """
    单题作答记录
    Individual answer in an attempt
    """
    attempt = models.ForeignKey(
        Attempt,
        on_delete=models.CASCADE,
        related_name='answers',
        verbose_name="所属会话"
    )
    question = models.ForeignKey(
        QuizQuestion,
        on_delete=models.CASCADE,
        verbose_name="题目"
    )
    student_answer = models.TextField(verbose_name="学生答案")
    is_correct = models.BooleanField(default=False, verbose_name="是否正确")
    time_spent_sec = models.FloatField(default=0.0, verbose_name="用时(秒)")
    feedback = models.TextField(blank=True, verbose_name="反馈")
    answered_at = models.DateTimeField(auto_now_add=True, verbose_name="作答时间")
    
    class Meta:
        verbose_name = "答题记录"
        verbose_name_plural = "答题记录"
        ordering = ['attempt', 'question__order']
    
    def __str__(self):
        return f"{self.attempt.student.student_id} - Q{self.question.order}"


class PersonalizationDelta(models.Model):
    """
    个性化教学方案增量 (Classroom Agent 输出)
    Personalized adjustments on top of unified plan
    """
    outline = models.ForeignKey(
        TeacherOutline,
        on_delete=models.CASCADE,
        related_name='personalizations',
        verbose_name="对应大纲"
    )
    lesson_plan = models.ForeignKey(
        UnifiedLessonPlan,
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        verbose_name="基线计划"
    )
    class_summary = models.JSONField(default=dict, verbose_name="班级统计")
    plan_delta = models.JSONField(default=dict, verbose_name="增量方案")
    student_reports = models.JSONField(default=list, verbose_name="学生个性化报告")
    is_published = models.BooleanField(default=False, verbose_name="是否已发布")
    reviewed_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="审核教师"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="生成时间")
    published_at = models.DateTimeField(null=True, blank=True, verbose_name="发布时间")
    
    class Meta:
        verbose_name = "个性化方案"
        verbose_name_plural = "个性化方案"
        ordering = ['-created_at']
    
    def __str__(self):
        status = "已发布" if self.is_published else "待审核"
        return f"{self.outline.title} - {status}"
